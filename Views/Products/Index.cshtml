@model IEnumerable<manyasligida.Models.Product>
@{
    ViewData["Title"] = "Ürünlerimiz - Manyaslı Gıda";
}

<!-- Page Header -->
<section class="page-header" style="background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%); padding: 120px 0 80px;">
    <div class="container">
        <div class="row justify-content-center text-center">
            <div class="col-lg-8" data-aos="fade-up">
                <h1 class="text-white fw-bold mb-3">Ürünlerimiz</h1>
                <p class="text-white lead">Manyas'ın bereketli topraklarından sofralarınıza uzanan doğal lezzetler</p>
            </div>
        </div>
    </div>
</section>

<!-- Search and Filter Section -->
<section class="section-padding bg-light">
    <div class="container">
        <div class="row">
            <!-- Search Bar -->
            <div class="col-lg-6 mb-4">
                <form method="get" action="@Url.Action("Search", "Products")" class="search-form">
                    <div class="input-group">
                        <input type="text" name="q" class="form-control" placeholder="Ürün ara..." value="@ViewBag.SearchTerm">
                        <button class="btn btn-primary" type="submit">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </form>
            </div>
            
            <!-- Sort Options -->
            <div class="col-lg-6 mb-4">
                <select class="form-select" id="sortSelect" onchange="changeSort(this.value)">
                    <option value="name" @(ViewBag.SortBy == "name" ? "selected" : "")>İsme Göre</option>
                    <option value="price" @(ViewBag.SortBy == "price" ? "selected" : "")>Fiyat (Düşük-Yüksek)</option>
                    <option value="price_desc" @(ViewBag.SortBy == "price_desc" ? "selected" : "")>Fiyat (Yüksek-Düşük)</option>
                    <option value="new" @(ViewBag.SortBy == "new" ? "selected" : "")>En Yeni</option>
                    <option value="popular" @(ViewBag.SortBy == "popular" ? "selected" : "")>Popüler</option>
                </select>
            </div>
        </div>

        <!-- Category Filter -->
        <div class="row">
            <div class="col-12">
                <div class="filter-section text-center" data-aos="fade-up">
                    <div class="btn-group" role="group">
                        <a href="@Url.Action("Index", "Products")" class="btn @(ViewBag.SelectedCategoryId == null ? "btn-primary" : "btn-outline-primary")">Tümü</a>
                        @foreach (var category in ViewBag.Categories)
                        {
                            <a href="@Url.Action("Index", "Products", new { categoryId = category.Id })" 
                               class="btn @(ViewBag.SelectedCategoryId == category.Id ? "btn-primary" : "btn-outline-primary")">
                                @category.Name
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Products Section -->
<section class="section-padding">
    <div class="container">
        @if (!Model.Any())
        {
            <div class="text-center py-5">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h3>Aradığınız kriterlere uygun ürün bulunamadı</h3>
                <p class="text-muted">Farklı arama kriterleri deneyebilir veya tüm ürünlerimize göz atabilirsiniz.</p>
                <a href="@Url.Action("Index", "Products")" class="btn btn-primary">Tüm Ürünleri Gör</a>
            </div>
        }
        else
        {
            <!-- Products Grid -->
            <div class="row g-4">
                @foreach (var product in Model)
                {
                    <div class="col-lg-3 col-md-6" data-aos="fade-up" data-aos-delay="@(100 * (Model.ToList().IndexOf(product) + 1))">
                        <div class="card product-card h-100">
                            <div class="product-image">
                                <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name">
                                <div class="product-overlay">
                                    <a href="@Url.Action("Detail", "Products", new { id = product.Id })" class="btn btn-primary">İncele</a>
                                </div>
                                @if (product.IsPopular)
                                {
                                    <div class="product-badge popular">Popüler</div>
                                }
                                @if (product.IsNew)
                                {
                                    <div class="product-badge new">Yeni</div>
                                }
                                @if (product.OldPrice.HasValue && product.OldPrice > product.Price)
                                {
                                    <div class="product-badge discount">%@(((product.OldPrice.Value - product.Price) / product.OldPrice.Value * 100).ToString("0")) İndirim</div>
                                }
                            </div>
                            <div class="card-body text-center">
                                <h5 class="card-title fw-bold">@product.Name</h5>
                                <p class="text-muted">@(product.Description?.Length > 80 ? product.Description.Substring(0, 80) + "..." : product.Description)</p>
                                <div class="product-info">
                                    <span class="badge bg-success me-2">@product.Weight</span>
                                    <span class="badge bg-info">@product.FatContent</span>
                                </div>
                                <div class="price mt-3">
                                    @if (product.OldPrice.HasValue && product.OldPrice > product.Price)
                                    {
                                        <span class="old-price text-muted text-decoration-line-through">₺@product.OldPrice.Value.ToString("0.00")</span>
                                    }
                                    <span class="current-price fw-bold text-primary">₺@product.Price.ToString("0.00")</span>
                                </div>
                                <div class="rating mt-2">
                                    <i class="fas fa-star text-warning"></i>
                                    <i class="fas fa-star text-warning"></i>
                                    <i class="fas fa-star text-warning"></i>
                                    <i class="fas fa-star text-warning"></i>
                                    <i class="fas fa-star text-warning"></i>
                                    <span class="ms-2 text-muted">(24)</span>
                                </div>
                            </div>
                            <div class="card-footer bg-transparent border-0 text-center">
                                <button class="btn btn-primary w-100 add-to-cart" data-product-id="@product.Id">
                                    <i class="fas fa-shopping-cart me-2"></i>Sepete Ekle
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Load More Button -->
            <div class="row mt-5">
                <div class="col-12 text-center">
                    <button class="btn btn-outline-primary btn-lg" id="loadMoreBtn">
                        <i class="fas fa-plus me-2"></i>Daha Fazla Ürün Yükle
                    </button>
                </div>
            </div>
        }
    </div>
</section>

<style>
    .search-form .input-group {
        border-radius: 25px;
        overflow: hidden;
        box-shadow: var(--shadow);
    }

    .search-form .form-control {
        border: none;
        padding: 15px 20px;
        font-size: 16px;
    }

    .search-form .btn {
        border-radius: 0 25px 25px 0;
        padding: 15px 25px;
    }

    .filter-section .btn-group {
        border-radius: 25px;
        overflow: hidden;
        box-shadow: var(--shadow);
    }

    .filter-section .btn {
        border: none;
        padding: 12px 24px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .filter-section .btn:hover {
        transform: translateY(-2px);
    }

    .product-card {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
        overflow: hidden;
    }

    .product-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 8px 30px rgba(255, 107, 53, 0.2);
    }

    .product-image {
        position: relative;
        overflow: hidden;
        height: 250px;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image img {
        transform: scale(1.1);
    }

    .product-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 107, 53, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .product-card:hover .product-overlay {
        opacity: 1;
    }

    .product-badge {
        position: absolute;
        top: 15px;
        left: 15px;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        color: white;
        z-index: 2;
    }

    .product-badge.popular {
        background: var(--success-color);
    }

    .product-badge.new {
        background: var(--accent-color);
        color: var(--text-dark);
    }

    .product-badge.discount {
        background: var(--danger-color);
    }

    .price {
        font-size: 18px;
    }

    .old-price {
        font-size: 14px;
        margin-right: 8px;
    }

    .current-price {
        font-size: 20px;
    }

    .add-to-cart {
        border-radius: 25px;
        padding: 12px 24px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .add-to-cart:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);
    }

    #loadMoreBtn {
        border-radius: 25px;
        padding: 15px 40px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    #loadMoreBtn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);
    }
</style>

<script>
    function changeSort(value) {
        const url = new URL(window.location);
        url.searchParams.set('sortBy', value);
        window.location.href = url.toString();
    }

    // Add to cart functionality
    document.querySelectorAll('.add-to-cart').forEach(button => {
        button.addEventListener('click', function() {
            const productId = this.getAttribute('data-product-id');
            const originalText = this.innerHTML;
            
            // Show loading state
            this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Ekleniyor...';
            this.disabled = true;

            // Send AJAX request
            fetch('/Products/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `productId=${productId}&quantity=1`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.innerHTML = '<i class="fas fa-check me-2"></i>Eklendi!';
                    this.classList.remove('btn-primary');
                    this.classList.add('btn-success');
                    
                    // Show success message
                    showNotification(data.message, 'success');
                } else {
                    this.innerHTML = originalText;
                    this.disabled = false;
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                this.innerHTML = originalText;
                this.disabled = false;
                showNotification('Bir hata oluştu', 'error');
            });
        });
    });

    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
</script> 